// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: musicplaylist.proto

package musicplaylist

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SongApi_CreateSong_FullMethodName = "/protoapi.SongApi/CreateSong"
	SongApi_ListSongs_FullMethodName  = "/protoapi.SongApi/ListSongs"
	SongApi_UpdateSong_FullMethodName = "/protoapi.SongApi/UpdateSong"
	SongApi_DeleteSong_FullMethodName = "/protoapi.SongApi/DeleteSong"
)

// SongApiClient is the client API for SongApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SongApiClient interface {
	CreateSong(ctx context.Context, in *Song, opts ...grpc.CallOption) (*Song, error)
	ListSongs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SongList, error)
	UpdateSong(ctx context.Context, in *Song, opts ...grpc.CallOption) (*Song, error)
	DeleteSong(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
}

type songApiClient struct {
	cc grpc.ClientConnInterface
}

func NewSongApiClient(cc grpc.ClientConnInterface) SongApiClient {
	return &songApiClient{cc}
}

func (c *songApiClient) CreateSong(ctx context.Context, in *Song, opts ...grpc.CallOption) (*Song, error) {
	out := new(Song)
	err := c.cc.Invoke(ctx, SongApi_CreateSong_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songApiClient) ListSongs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SongList, error) {
	out := new(SongList)
	err := c.cc.Invoke(ctx, SongApi_ListSongs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songApiClient) UpdateSong(ctx context.Context, in *Song, opts ...grpc.CallOption) (*Song, error) {
	out := new(Song)
	err := c.cc.Invoke(ctx, SongApi_UpdateSong_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songApiClient) DeleteSong(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, SongApi_DeleteSong_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SongApiServer is the server API for SongApi service.
// All implementations must embed UnimplementedSongApiServer
// for forward compatibility
type SongApiServer interface {
	CreateSong(context.Context, *Song) (*Song, error)
	ListSongs(context.Context, *emptypb.Empty) (*SongList, error)
	UpdateSong(context.Context, *Song) (*Song, error)
	DeleteSong(context.Context, *wrapperspb.StringValue) (*wrapperspb.BoolValue, error)
	mustEmbedUnimplementedSongApiServer()
}

// UnimplementedSongApiServer must be embedded to have forward compatible implementations.
type UnimplementedSongApiServer struct {
}

func (UnimplementedSongApiServer) CreateSong(context.Context, *Song) (*Song, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSong not implemented")
}
func (UnimplementedSongApiServer) ListSongs(context.Context, *emptypb.Empty) (*SongList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSongs not implemented")
}
func (UnimplementedSongApiServer) UpdateSong(context.Context, *Song) (*Song, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSong not implemented")
}
func (UnimplementedSongApiServer) DeleteSong(context.Context, *wrapperspb.StringValue) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSong not implemented")
}
func (UnimplementedSongApiServer) mustEmbedUnimplementedSongApiServer() {}

// UnsafeSongApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SongApiServer will
// result in compilation errors.
type UnsafeSongApiServer interface {
	mustEmbedUnimplementedSongApiServer()
}

func RegisterSongApiServer(s grpc.ServiceRegistrar, srv SongApiServer) {
	s.RegisterService(&SongApi_ServiceDesc, srv)
}

func _SongApi_CreateSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Song)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongApiServer).CreateSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongApi_CreateSong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongApiServer).CreateSong(ctx, req.(*Song))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongApi_ListSongs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongApiServer).ListSongs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongApi_ListSongs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongApiServer).ListSongs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongApi_UpdateSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Song)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongApiServer).UpdateSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongApi_UpdateSong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongApiServer).UpdateSong(ctx, req.(*Song))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongApi_DeleteSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongApiServer).DeleteSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongApi_DeleteSong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongApiServer).DeleteSong(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

// SongApi_ServiceDesc is the grpc.ServiceDesc for SongApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SongApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protoapi.SongApi",
	HandlerType: (*SongApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSong",
			Handler:    _SongApi_CreateSong_Handler,
		},
		{
			MethodName: "ListSongs",
			Handler:    _SongApi_ListSongs_Handler,
		},
		{
			MethodName: "UpdateSong",
			Handler:    _SongApi_UpdateSong_Handler,
		},
		{
			MethodName: "DeleteSong",
			Handler:    _SongApi_DeleteSong_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "musicplaylist.proto",
}
